package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportedCommentsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportedCommentsAllPropertiesEquals(ReportedComments expected, ReportedComments actual) {
        assertReportedCommentsAutoGeneratedPropertiesEquals(expected, actual);
        assertReportedCommentsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportedCommentsAllUpdatablePropertiesEquals(ReportedComments expected, ReportedComments actual) {
        assertReportedCommentsUpdatableFieldsEquals(expected, actual);
        assertReportedCommentsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportedCommentsAutoGeneratedPropertiesEquals(ReportedComments expected, ReportedComments actual) {
        assertThat(actual)
            .as("Verify ReportedComments auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportedCommentsUpdatableFieldsEquals(ReportedComments expected, ReportedComments actual) {
        assertThat(actual)
            .as("Verify ReportedComments relevant properties")
            .satisfies(a -> assertThat(a.getReportedBy()).as("check reportedBy").isEqualTo(expected.getReportedBy()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportedCommentsUpdatableRelationshipsEquals(ReportedComments expected, ReportedComments actual) {
        assertThat(actual)
            .as("Verify ReportedComments relationships")
            .satisfies(a -> assertThat(a.getComment()).as("check comment").isEqualTo(expected.getComment()));
    }
}
