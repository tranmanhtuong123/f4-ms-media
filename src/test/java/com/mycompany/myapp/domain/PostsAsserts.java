package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PostsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsAllPropertiesEquals(Posts expected, Posts actual) {
        assertPostsAutoGeneratedPropertiesEquals(expected, actual);
        assertPostsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsAllUpdatablePropertiesEquals(Posts expected, Posts actual) {
        assertPostsUpdatableFieldsEquals(expected, actual);
        assertPostsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsAutoGeneratedPropertiesEquals(Posts expected, Posts actual) {
        assertThat(actual)
            .as("Verify Posts auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsUpdatableFieldsEquals(Posts expected, Posts actual) {
        assertThat(actual)
            .as("Verify Posts relevant properties")
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getMediaUrl()).as("check mediaUrl").isEqualTo(expected.getMediaUrl()))
            .satisfies(a -> assertThat(a.getIsPrivate()).as("check isPrivate").isEqualTo(expected.getIsPrivate()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsUpdatableRelationshipsEquals(Posts expected, Posts actual) {
        // empty method
    }
}
